LIB_DIR =  ./parser/lib/
BUILD_DIR = .
DEMO_SRC_DIR = .
CORE_DIR = ./parser/core
COLLECTION_DIR = ./parser/ext/collection
EXPRTRAVERSE_DIR = ./parser/ext/expr_traverse
NODEVISITOR_DIR = ./parser/ext/node_visitor
GSP_CORE_LIB = gspcore64
GSP_COLLECTION_LIB = gspcollection64

CC = g++
CFLAGS = -c -I $(COLLECTION_DIR)/includes -I $(EXPRTRAVERSE_DIR) -I $(CORE_DIR) -I $(NODEVISITOR_DIR) -fpermissive


DEMO_EXE = $(BUILD_DIR)/out

SOURCE = $(DEMO_SRC_DIR)/query.cpp \
		 $(EXPRTRAVERSE_DIR)/expr_traverse.c \
		 $(NODEVISITOR_DIR)/node_visitor.c 
	

OBJECTS = $(BUILD_DIR)/query.o \
	$(BUILD_DIR)/expr_traverse.o \
	$(BUILD_DIR)/node_visitor.o


all: $(DEMO_EXE)

$(DEMO_EXE): create_build_dir \
	$(OBJECTS) \
	create_demo_exe \
	clean_demo_obj
	
create_demo_exe:
	$(CC)  $(OBJECTS)  -L$(LIB_DIR) -l$(GSP_CORE_LIB) -l$(GSP_COLLECTION_LIB) -o $(DEMO_EXE)
	
create_build_dir:
	@if [ ! -d "$(BUILD_DIR)" ]; \
	then \
	    mkdir $(BUILD_DIR); \
	fi \
	 	
$(BUILD_DIR)/query.o: $(DEMO_SRC_DIR)/query.cpp
	$(CC) $(CFLAGS) $< -o $@

	
$(BUILD_DIR)/expr_traverse.o: $(EXPRTRAVERSE_DIR)/expr_traverse.c
	$(CC) $(CFLAGS) $< -o $@

$(BUILD_DIR)/node_visitor.o: $(NODEVISITOR_DIR)/node_visitor.c
	$(CC) $(CFLAGS) $< -o $@

clean_demo_obj:
	rm -f $(BUILD_DIR)/*.o 
	
clean:
	rm -rf $(BUILD_DIR)
